name: Build bootc images with artifacts
on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to build (comma-separated)'
        required: true
        default: 'linux/amd64,linux/arm64'
      formats:
        description: 'Export formats (comma-separated)'
        required: true
        default: 'anaconda-iso,qcow2'
      device_types:
        description: 'Device types to build (comma-separated, leave empty for all changed)'
        required: false
        default: ''
  push:
    branches:
      - main

jobs:
  # Detect changed device types
  detect-changes:
    name: Detect changed device types
    runs-on: ubuntu-latest
    outputs:
      device-types: ${{ steps.changes.outputs.device-types }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed device types
        id: changes
        run: |
          set -euo pipefail
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.device_types }}" ]; then
            # Manual dispatch with specific device types
            DEVICE_TYPES="${{ github.event.inputs.device_types }}"
            echo "Manual dispatch with device types: $DEVICE_TYPES"
          else
            # Detect changes automatically
            if [ "${{ github.event_name }}" = "push" ]; then
              # For push events, compare with previous commit
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            else
              # For manual dispatch without specific types, build all available
              CHANGED_FILES=$(find devices -name "Containerfile" -o -name "containerfile" | head -20)
            fi
            
            echo "Changed files:"
            echo "$CHANGED_FILES"
            
            # Extract unique device types from changed files in devices/ directory
            DEVICE_TYPES=$(echo "$CHANGED_FILES" | grep -E '^devices/[^/]+/' | sed 's|^devices/\([^/]*\)/.*|\1|' | sort -u | tr '\n' ',' | sed 's/,$//')
            
            if [ -z "$DEVICE_TYPES" ]; then
              echo "No device type changes detected"
              echo "has-changes=false" >> $GITHUB_OUTPUT
              echo "device-types=" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          echo "Device types to build: $DEVICE_TYPES"
          echo "has-changes=true" >> $GITHUB_OUTPUT
          echo "device-types=$DEVICE_TYPES" >> $GITHUB_OUTPUT

      - name: Validate device types
        run: |
          if [ "${{ steps.changes.outputs.has-changes }}" = "true" ]; then
            IFS=',' read -ra TYPES <<< "${{ steps.changes.outputs.device-types }}"
            for TYPE in "${TYPES[@]}"; do
              if [ ! -d "devices/$TYPE" ]; then
                echo "Error: devices/$TYPE directory does not exist"
                exit 1
              fi
              if [ ! -f "devices/$TYPE/Containerfile" ] && [ ! -f "devices/$TYPE/containerfile" ]; then
                echo "Error: No Containerfile found in devices/$TYPE"
                exit 1
              fi
            done
            echo "All device types validated successfully"
          fi

  # Determine version tags for each device type
  determine-versions:
    name: Determine version tags
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    outputs:
      versions: ${{ steps.versions.outputs.versions }}
    env:
      REGISTRY: ghcr.io/${{ github.repository_owner }}
    steps:
      - name: Log in to GitHub Container Registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version numbers
        id: versions
        run: |
          set -euo pipefail
          
          # Initialize versions JSON object
          VERSIONS_JSON='{'
          FIRST=true
          
          IFS=',' read -ra DEVICE_ARRAY <<< "${{ needs.detect-changes.outputs.device-types }}"
          
          for DEVICE_TYPE in "${DEVICE_ARRAY[@]}"; do
            IMAGE_NAME="device-example-${DEVICE_TYPE}"
            IMAGE_BASE="${{ env.REGISTRY }}/${IMAGE_NAME}"
            
            echo "Determining version for device type: $DEVICE_TYPE"
            echo "Image base: $IMAGE_BASE"
            
            # Get existing tags from the registry
            EXISTING_TAGS=""
            if podman search --list-tags "${IMAGE_BASE}" 2>/dev/null | grep -q "NAME"; then
              # Extract version tags (v1, v2, v3, etc.)
              EXISTING_TAGS=$(podman search --list-tags "${IMAGE_BASE}" 2>/dev/null | \
                grep -oE 'v[0-9]+$' | \
                sort -V || echo "")
            fi
            
            if [ -z "$EXISTING_TAGS" ]; then
              echo "No existing version tags found for $DEVICE_TYPE, starting with v1"
              NEXT_VERSION="v1"
            else
              # Find the highest version number
              HIGHEST_VERSION=$(echo "$EXISTING_TAGS" | tail -n1)
              HIGHEST_NUM=$(echo "$HIGHEST_VERSION" | sed 's/v//')
              NEXT_NUM=$((HIGHEST_NUM + 1))
              NEXT_VERSION="v${NEXT_NUM}"
              echo "Highest existing version: $HIGHEST_VERSION, next version: $NEXT_VERSION"
            fi
            
            # Add to JSON object
            if [ "$FIRST" = false ]; then
              VERSIONS_JSON="${VERSIONS_JSON},"
            fi
            FIRST=false
            
            VERSIONS_JSON="${VERSIONS_JSON}\"${DEVICE_TYPE}\":\"${NEXT_VERSION}\""
            
            echo "Device type $DEVICE_TYPE will use version: $NEXT_VERSION"
          done
          
          VERSIONS_JSON="${VERSIONS_JSON}}"
          echo "versions=$VERSIONS_JSON" >> $GITHUB_OUTPUT
          echo "Final versions JSON: $VERSIONS_JSON"

  # Setup job: Parse build parameters
  setup:
    name: Setup build parameters
    runs-on: ubuntu-latest
    needs: [detect-changes, determine-versions]
    if: needs.detect-changes.outputs.has-changes == 'true'
    outputs:
      platforms: ${{ steps.setup.outputs.platforms }}
      formats: ${{ steps.setup.outputs.formats }}
      matrix: ${{ steps.setup.outputs.matrix }}
      device-types: ${{ needs.detect-changes.outputs.device-types }}
      versions: ${{ needs.determine-versions.outputs.versions }}
    steps:
      - name: Setup build parameters
        id: setup
        run: |
          # Set platforms (from input or default)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PLATFORMS="${{ github.event.inputs.platforms }}"
            FORMATS="${{ github.event.inputs.formats }}"
          else
            PLATFORMS="linux/amd64,linux/arm64"
            FORMATS="anaconda-iso,qcow2"
          fi
          
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "formats=$FORMATS" >> $GITHUB_OUTPUT
          echo "Building for platforms: $PLATFORMS"
          echo "Building formats: $FORMATS"
          
          # Create matrix for build jobs (platform x device-type combinations)
          MATRIX='{"include":['
          FIRST=true
          
          IFS=',' read -ra PLATFORM_ARRAY <<< "$PLATFORMS"
          IFS=',' read -ra DEVICE_ARRAY <<< "${{ needs.detect-changes.outputs.device-types }}"
          
          for DEVICE_TYPE in "${DEVICE_ARRAY[@]}"; do
            for PLATFORM in "${PLATFORM_ARRAY[@]}"; do
              ARCH="${PLATFORM#linux/}"
              
              if [ "$FIRST" = false ]; then
                MATRIX="${MATRIX},"
              fi
              FIRST=false
              
              if [ "$ARCH" = "arm64" ]; then
                RUNNER="ubuntu-24.04-arm"
              else
                RUNNER="ubuntu-latest"
              fi
              
              MATRIX="${MATRIX}{\"platform\":\"$PLATFORM\",\"arch\":\"$ARCH\",\"runner\":\"$RUNNER\",\"device-type\":\"$DEVICE_TYPE\"}"
            done
          done
          MATRIX="${MATRIX}]}"
          
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "Matrix: $MATRIX"

  # Matrix job: Build the bootc images for each platform and device type
  build-image:
    name: Build BootC image
    needs: setup
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    runs-on: ${{ matrix.runner }}
    outputs:
      image: ${{ steps.build.outputs.image }}
      tags: ${{ steps.build.outputs.tags }}
    env:
      IMAGE_NAME: device-example-${{ matrix.device-type }}
      REGISTRY: ghcr.io/${{ github.repository_owner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version for this device type
        id: version
        run: |
          # Extract version from the versions JSON
          VERSIONS='${{ needs.setup.outputs.versions }}'
          VERSION=$(echo "$VERSIONS" | jq -r '."${{ matrix.device-type }}"')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version for ${{ matrix.device-type }}: $VERSION"

      - name: Verify Containerfile exists
        run: |
          CONTAINERFILE_PATH=""
          if [ -f "devices/${{ matrix.device-type }}/Containerfile" ]; then
            CONTAINERFILE_PATH="devices/${{ matrix.device-type }}/Containerfile"
          elif [ -f "devices/${{ matrix.device-type }}/containerfile" ]; then
            CONTAINERFILE_PATH="devices/${{ matrix.device-type }}/containerfile"
          else
            echo "Error: No Containerfile found in devices/${{ matrix.device-type }}"
            exit 1
          fi
          echo "CONTAINERFILE_PATH=$CONTAINERFILE_PATH" >> $GITHUB_ENV
          echo "Using Containerfile: $CONTAINERFILE_PATH"

      - name: Log in to Red Hat Registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: registry.redhat.io
          username: ${{ secrets.RH_USERNAME }}
          password: ${{ secrets.RH_PASSWORD }}

      - name: Prepare Buildah secrets for container subscription
        run: |
          echo "${{ secrets.RH_USERNAME }}" > secret-username
          echo "${{ secrets.RH_PASSWORD }}" > secret-password
          chmod 600 secret-username secret-password

      - name: Set architecture tag
        id: arch-tag
        run: |
          ARCH="${{ matrix.arch }}"
          if [ "$ARCH" = "amd64" ]; then
            ARCH_TAG="x86"
          elif [ "$ARCH" = "arm64" ]; then
            ARCH_TAG="arm"
          else
            ARCH_TAG="$ARCH"
          fi
          echo "arch-tag=$ARCH_TAG" >> $GITHUB_OUTPUT
          echo "Architecture tag for $ARCH: $ARCH_TAG"

      - name: Build platform-specific image with Buildah
        id: build
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: |
            latest-${{ matrix.arch }}
            ${{ github.sha }}-${{ matrix.arch }}
            ${{ steps.version.outputs.version }}-${{ matrix.arch }}
            ${{ steps.arch-tag.outputs.arch-tag }}
          platforms: ${{ matrix.platform }}
          context: devices/${{ matrix.device-type }}
          containerfiles: |
            ${{ env.CONTAINERFILE_PATH }}
          extra-args: |
            --secret id=username,src=secret-username
            --secret id=password,src=secret-password
            --pull=always

      - name: Cleanup secret files
        run: rm -f secret-username secret-password

      - name: Setup empty Docker config
        run: |
          mkdir -p $HOME/.docker
          echo '{ "auths": {} }' > $HOME/.docker/config.json

      - name: Log in to GitHub Container Registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push platform-specific image to GHCR
        id: push
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build.outputs.image }}
          tags: ${{ steps.build.outputs.tags }}
          registry: ${{ env.REGISTRY }}

  # Job: Create multi-platform manifest for each device type
  create-manifest:
    name: Create multi-platform manifests
    needs: [setup, build-image]
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io/${{ github.repository_owner }}
    steps:
      - name: Log in to GitHub Container Registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-platform manifests
        run: |
          set -euo pipefail
          
          IFS=',' read -ra DEVICE_ARRAY <<< "${{ needs.setup.outputs.device-types }}"
          VERSIONS='${{ needs.setup.outputs.versions }}'
          
          for DEVICE_TYPE in "${DEVICE_ARRAY[@]}"; do
            IMAGE_NAME="device-example-${DEVICE_TYPE}"
            IMAGE_BASE="${{ env.REGISTRY }}/${IMAGE_NAME}"
            LATEST_MANIFEST="${IMAGE_BASE}:latest"
            SHA_MANIFEST="${IMAGE_BASE}:${{ github.sha }}"
            
            # Get version for this device type
            VERSION=$(echo "$VERSIONS" | jq -r ".\"${DEVICE_TYPE}\"")
            VERSION_MANIFEST="${IMAGE_BASE}:${VERSION}"
            
            echo "Creating multi-platform manifests for device type: $DEVICE_TYPE"
            echo "Latest manifest: $LATEST_MANIFEST"
            echo "SHA manifest: $SHA_MANIFEST"
            echo "Version manifest: $VERSION_MANIFEST"
            
            # Remove existing manifests if they exist
            podman manifest rm "$LATEST_MANIFEST" 2>/dev/null || true
            podman manifest rm "$SHA_MANIFEST" 2>/dev/null || true
            podman manifest rm "$VERSION_MANIFEST" 2>/dev/null || true
            
            # Create new manifests
            podman manifest create "$LATEST_MANIFEST"
            podman manifest create "$SHA_MANIFEST"
            podman manifest create "$VERSION_MANIFEST"
            
            # Add platform-specific images to manifests
            IFS=',' read -ra PLATFORM_ARRAY <<< "${{ needs.setup.outputs.platforms }}"
            for PLATFORM in "${PLATFORM_ARRAY[@]}"; do
              ARCH="${PLATFORM#linux/}"
              PLATFORM_LATEST="${IMAGE_BASE}:latest-${ARCH}"
              PLATFORM_SHA="${IMAGE_BASE}:${{ github.sha }}-${ARCH}"
              PLATFORM_VERSION="${IMAGE_BASE}:${VERSION}-${ARCH}"
              
              # Set architecture tag
              if [ "$ARCH" = "amd64" ]; then
                ARCH_TAG="x86"
              elif [ "$ARCH" = "arm64" ]; then
                ARCH_TAG="arm"
              else
                ARCH_TAG="$ARCH"
              fi
              
              echo "Processing platform: $PLATFORM (arch: $ARCH, tag: $ARCH_TAG) for device: $DEVICE_TYPE"
              echo "  Adding $PLATFORM_LATEST to latest manifest"
              echo "  Adding $PLATFORM_SHA to SHA manifest"
              echo "  Adding $PLATFORM_VERSION to version manifest"
              echo "  Architecture tag: ${IMAGE_BASE}:${ARCH_TAG}"
              
              # Add to manifests with proper architecture specification
              podman manifest add --arch "$ARCH" --os "linux" "$LATEST_MANIFEST" "docker://$PLATFORM_LATEST"
              podman manifest add --arch "$ARCH" --os "linux" "$SHA_MANIFEST" "docker://$PLATFORM_SHA"
              podman manifest add --arch "$ARCH" --os "linux" "$VERSION_MANIFEST" "docker://$PLATFORM_VERSION"
            done
            
            echo "Inspecting created manifests for $DEVICE_TYPE..."
            podman manifest inspect "$LATEST_MANIFEST"
            podman manifest inspect "$SHA_MANIFEST"
            podman manifest inspect "$VERSION_MANIFEST"
            
            echo "Pushing multi-platform manifests for $DEVICE_TYPE..."
            podman manifest push --all "$LATEST_MANIFEST" "docker://$LATEST_MANIFEST"
            podman manifest push --all "$SHA_MANIFEST" "docker://$SHA_MANIFEST"
            podman manifest push --all "$VERSION_MANIFEST" "docker://$VERSION_MANIFEST"
            
            echo "Multi-platform manifests for $DEVICE_TYPE created and pushed successfully!"
            echo "Available tags: latest, ${{ github.sha }}, ${VERSION}"
          done

  # Summary job
  summary:
    name: Build Summary
    needs: [detect-changes, setup, build-image, create-manifest]
    runs-on: ubuntu-latest
    if: always()
    env:
      REGISTRY: ghcr.io/${{ github.repository_owner }}
    steps:
      - name: Print build summary
        if: needs.detect-changes.outputs.has-changes == 'true'
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Device Types Built" >> $GITHUB_STEP_SUMMARY
          echo "- Device Types: ${{ needs.setup.outputs.device-types }}" >> $GITHUB_STEP_SUMMARY
          echo "- Platforms: ${{ needs.setup.outputs.platforms }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Multi-platform Images" >> $GITHUB_STEP_SUMMARY
          IFS=',' read -ra DEVICE_ARRAY <<< "${{ needs.setup.outputs.device-types }}"
          VERSIONS='${{ needs.setup.outputs.versions }}'
          
          for DEVICE_TYPE in "${DEVICE_ARRAY[@]}"; do
            VERSION=$(echo "$VERSIONS" | jq -r ".\"${DEVICE_TYPE}\"")
            echo "#### Device Type: $DEVICE_TYPE" >> $GITHUB_STEP_SUMMARY
            echo "- Latest: ${{ env.REGISTRY }}/device-example-${DEVICE_TYPE}:latest" >> $GITHUB_STEP_SUMMARY
            echo "- SHA: ${{ env.REGISTRY }}/device-example-${DEVICE_TYPE}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "- Version: ${{ env.REGISTRY }}/device-example-${DEVICE_TYPE}:${VERSION}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "**Platform-specific Images:**" >> $GITHUB_STEP_SUMMARY
            IFS=',' read -ra PLATFORM_ARRAY <<< "${{ needs.setup.outputs.platforms }}"
            for PLATFORM in "${PLATFORM_ARRAY[@]}"; do
              ARCH="${PLATFORM#linux/}"
              # Set architecture tag
              if [ "$ARCH" = "amd64" ]; then
                ARCH_TAG="x86"
              elif [ "$ARCH" = "arm64" ]; then
                ARCH_TAG="arm"
              else
                ARCH_TAG="$ARCH"
              fi
              echo "- $ARCH latest: ${{ env.REGISTRY }}/device-example-${DEVICE_TYPE}:latest-${ARCH}" >> $GITHUB_STEP_SUMMARY
              echo "- $ARCH SHA: ${{ env.REGISTRY }}/device-example-${DEVICE_TYPE}:${{ github.sha }}-${ARCH}" >> $GITHUB_STEP_SUMMARY
              echo "- $ARCH version: ${{ env.REGISTRY }}/device-example-${DEVICE_TYPE}:${VERSION}-${ARCH}" >> $GITHUB_STEP_SUMMARY
              echo "- $ARCH specific: ${{ env.REGISTRY }}/device-example-${DEVICE_TYPE}:${ARCH_TAG}" >> $GITHUB_STEP_SUMMARY
            done
            echo "" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "### Build Status" >> $GITHUB_STEP_SUMMARY
          echo "- Change Detection: ${{ needs.detect-changes.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Version Determination: ${{ needs.determine-versions.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Setup: ${{ needs.setup.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Base Image Build: ${{ needs.build-image.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Manifest Creation: ${{ needs.create-manifest.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Print no changes message
        if: needs.detect-changes.outputs.has-changes == 'false'
        run: |
          echo "## No Changes Detected" >> $GITHUB_STEP_SUMMARY
          echo "No changes were detected in any device type directories under \`devices/\`." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Device Types" >> $GITHUB_STEP_SUMMARY
          if [ -d "devices" ]; then
            for dir in devices/*/; do
              if [ -d "$dir" ]; then
                device_name=$(basename "$dir")
                echo "- \`$device_name\`" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "No devices directory found." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**To trigger a build:**" >> $GITHUB_STEP_SUMMARY
          echo "- Make changes to files in any \`devices/{type}/\` directory, or" >> $GITHUB_STEP_SUMMARY
          echo "- Run workflow manually and specify device types to build" >> $GITHUB_STEP_SUMMARY

      - name: Checkout for no-changes summary
        if: needs.detect-changes.outputs.has-changes == 'false'
        uses: actions/checkout@v4